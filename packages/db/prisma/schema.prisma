generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models - https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DiscordUser {
    id          String        @id @default(cuid())
    name        String
    email       String        @unique
    password    String
    guildMember GuildMember[]
    EventLog    EventLog[]
}

model GuildMember {
    id      String      @id @default(cuid())
    guildId String
    userId  String
    guild   Guild       @relation(fields: [guildId], references: [id], onDelete: Cascade)
    user    DiscordUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Guild {
    id        String   @id
    name      String
    icon      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    guildMember GuildMember[]
    EventLog    EventLog[]
}

model DiscordEvent {
    id          String     @id @default(cuid())
    name        String     @unique
    description String
    eventLog    EventLog[]
}

model EventLog {
    id           String       @id @default(cuid())
    guildId      String
    userId       String
    eventId      String
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    guild        Guild        @relation(fields: [guildId], references: [id], onDelete: Cascade)
    user         DiscordUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
    discordEvent DiscordEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
